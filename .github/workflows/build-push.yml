name: Build and Push API & Web & Admin

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g. v1.7.2)'
        required: true
        default: 'latest'

concurrency:
  group: build-push-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DIFY_IMAGE_NAME: ${{ vars.DIFY_IMAGE_NAME || 'yulonger/dify-plus' }}

jobs:
  build:
    runs-on: ${{ matrix.platform == 'linux/arm64' && 'arm64_runner' || 'ubuntu-latest' }}
    strategy:
      matrix:
        include:
          - service_name: "build-api-amd64"
            component: "api"
            context: "api"
            platform: linux/amd64
          - service_name: "build-web-amd64"
            component: "web"
            context: "web"
            platform: linux/amd64
          - service_name: "build-admin-server-amd64"
            component: "admin-server"
            context: "admin/server"
            platform: linux/amd64
          - service_name: "build-admin-web-amd64"
            component: "admin-web"
            context: "admin/web"
            platform: linux/amd64

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DIFY_IMAGE_NAME }}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:${{ matrix.context }}"
          platforms: ${{ matrix.platform }}
          build-args: COMMIT_SHA=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.DIFY_IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=${{ matrix.service_name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service_name }}

      - name: Export digest
        env:
          DIGEST: ${{ steps.build.outputs.digest }}
          COMPONENT: ${{ matrix.component }}
        run: |
          mkdir -p /tmp/digests/${{ matrix.component }}
          sanitized_digest=${DIGEST#sha256:}
          touch "/tmp/digests/${{ matrix.component }}/${sanitized_digest}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.component }}-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/${{ matrix.component }}/*
          if-no-files-found: error
          retention-days: 1

  create-manifest:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - component: "api"
            context: "api"
          - component: "web"
            context: "web"
          - component: "admin-server"
            context: "admin/server"
          - component: "admin-web"
            context: "admin/web"
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ matrix.component }}-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Set version tag
        id: version
        run: |
          if [[ "${{ github.event.inputs.version }}" == "latest" ]]; then
            echo "VERSION=${{ matrix.component }}-latest" >> $GITHUB_ENV
          else
            echo "VERSION=${{ matrix.component }}-${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi

      - name: Create manifest list and push
        working-directory: /tmp/digests
        env:
          IMAGE_NAME: ${{ env.DIFY_IMAGE_NAME }}
          TAG: ${{ env.VERSION }}
        run: |
          docker buildx imagetools create -t ${IMAGE_NAME}:${TAG} \
            $(printf "${IMAGE_NAME}@sha256:%s " *)

      - name: Inspect image
        env:
          IMAGE_NAME: ${{ env.DIFY_IMAGE_NAME }}
          TAG: ${{ env.VERSION }}
        run: |
          docker buildx imagetools inspect "${IMAGE_NAME}:${TAG}"
